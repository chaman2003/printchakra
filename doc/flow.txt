Processing Stage | Technology / Algorithm / Model | Purpose
--------------------------------------------------------------------------
Scanning (Capture) | Native Camera API (mobile), getUserMedia (web) | Capture high-resolution images from phone or webcam
Pre-check (Blur/Focus) | Variance of Laplacian, Gradient magnitude | Reject or warn on blurry images before upload
Edge Detection & Crop | OpenCV contours + approxPolyDP | Detect document edges and crop to page region
Skew/Orientation Correction | Hough Transform / perspective transform | Straighten tilted scans and correct perspective
Denoise & Contrast | OpenCV fastNlMeansDenoising + CLAHE | Reduce noise and improve contrast for OCR
OCR Text Extraction | Tesseract OCR (eng) | Extract printed or handwritten text to plain text
Document Classification | Lightweight CNN or SVM (mobile DNN) | Identify type (receipt, invoice, ID) to select pipeline
Smart Enhancement | MobileNet/Small DNN or learned filter | One-step enhancement for low-quality images
Post-process OCR | Regex / NLP rules (spaCy) | Clean, normalize, and extract structured fields
Storage & Indexing | Local FS + optional S3 / MongoDB GridFS | Save processed images and text; enable multi-device access
Metadata & Search | Simple NLP keyword extraction | Tag documents for fast search and filtering
PDF Export & Print Prep | ReportLab / PIL / OpenCV resize | Build print-ready PDFs and fit to page sizes (A4)
Printer Integration | Windows print (pywin32) or OS print command | Send PDF/image to local printer
Monitoring & Observability | Structured logs (JSON), basic metrics | Monitor processing success, latency, and errors
Queue/Scaling (optional) | Celery / Redis or RQ | Move heavy tasks to background workers for scaling

Notes:
- The table focuses on practical, implementable components that fit the PrintChakra architecture.
- Prioritize reliability (pre-check, denoise, OCR) before adding more complex ML features.
